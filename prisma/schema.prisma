// datasource and generator
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//
// ENUMS
//

enum Role {
  USER
  ADMIN
  MANAGER
  TRAINER
  CARETAKER
  SUPERADMIN
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NOT_ATTENDED
}

//
// AUTH.JS V5 MODELS
//

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  role           Role            @default(USER)
  level          String          @default("beginner")

  accounts       Account[]
  sessions       Session[]
  Authenticator  Authenticator[]

  // Relations
  bookings       Booking[]
  families       Family[]        @relation("FamilyMembers")
  ownedFamilies  Family[]        @relation("FamilyOwner")
  fitnessTests   FitnessTest[]
  workouts       Workout[]
  trainerProfile Trainer?
  caretakerSlots Slot[]          @relation("CaretakerSlots")
  feedbacks      Feedback[]

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Account {
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken  String   @unique
  userId        String
  expires       DateTime

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

//
// CUSTOM MODELS
//

model Pool {
  id        String   @id @default(cuid())
  name      String
  location  String
  images    String[]   // Array of image URLs

  slots     Slot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Slot {
  id           String   @id @default(cuid())
  pool         Pool     @relation(fields: [poolId], references: [id])
  poolId       String

  date         DateTime
  startTime    DateTime
  endTime      DateTime
  capacity     Int

  trainerId    String?
  trainer      Trainer? @relation(fields: [trainerId], references: [id])

  caretakerId  String?
  caretaker    User?    @relation("CaretakerSlots", fields: [caretakerId], references: [id])

  bookings     Booking[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Booking {
  id         String        @id @default(cuid())
  user       User          @relation(fields: [userId], references: [id])
  userId     String

  slot       Slot          @relation(fields: [slotId], references: [id])
  slotId     String

  familyId   String?
  family     Family?       @relation(fields: [familyId], references: [id])

  trainerId  String?
  trainer    Trainer?      @relation(fields: [trainerId], references: [id])

  status     BookingStatus @default(CONFIRMED) // CONFIRMED, CANCELLED, COMPLETED, NOT_ATTENDED
  notes      String?

  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Family {
  id        String   @id @default(cuid())
  name      String

  ownerId   String
  owner     User     @relation("FamilyOwner", fields: [ownerId], references: [id])

  members   User[]   @relation("FamilyMembers")

  bookings  Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trainer {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])

  expertise String?
  bio       String?

  slots     Slot[]
  feedbacks Feedback[]
  bookings  Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id         String   @id @default(cuid())
  trainerId  String
  userId     String

  trainer    Trainer  @relation(fields: [trainerId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  rating     Int
  comment    String?

  createdAt  DateTime @default(now())
}

model FitnessTest {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  resultUrl String?   // URL to AI test result video or report
  score     Int?
  notes     String?

  createdAt DateTime @default(now())
}

model Workout {
  id          String    @id @default(cuid())
  name        String
  type        String    // beginner/expert
  date        DateTime  @default(now())
  duration    Int       // in minutes
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  exercises   Exercise[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Exercise {
  id          String    @id @default(cuid())
  name        String
  trackingKey String    // exercise identifier for pose detection
  workoutId   String
  workout     Workout   @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  sets        Set[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Set {
  id          String    @id @default(cuid())
  reps        Int
  weight      Float?
  formScore   Float?    // 0-100%
  exerciseId  String
  exercise    Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
